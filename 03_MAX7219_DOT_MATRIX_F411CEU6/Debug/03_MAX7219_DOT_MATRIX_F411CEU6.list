
03_MAX7219_DOT_MATRIX_F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004324  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e4  080045e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045ec  080045ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  08004664  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004664  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a994  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  0002aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d75  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c318  00000000  00000000  00043475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870de  00000000  00000000  0004f78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d686b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000d68bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080044a4 	.word	0x080044a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080044a4 	.word	0x080044a4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fcf6 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8e6 	bl	80006c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004fc:	f000 f87e 	bl	80005fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Multi_Init();
 8000504:	f000 f969 	bl	80007da <MAX7219_Multi_Init>

 MAX7219_Scroll_Text("GOOD MORNING THIS IS DIGITAL CLOCK  HAVE A GREAT DAY", 70);
 8000508:	2146      	movs	r1, #70	; 0x46
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <main+0x38>)
 800050c:	f000 f9f4 	bl	80008f8 <MAX7219_Scroll_Text>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin);
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <main+0x3c>)
 8000516:	f001 f858 	bl	80015ca <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f000 fd51 	bl	8000fc4 <HAL_Delay>
	  HAL_GPIO_TogglePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin);
 8000522:	e7f5      	b.n	8000510 <main+0x24>
 8000524:	080044bc 	.word	0x080044bc
 8000528:	40020800 	.word	0x40020800

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 feac 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <SystemClock_Config+0xc8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <SystemClock_Config+0xcc>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fe45 	bl	8003240 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f908 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2103      	movs	r1, #3
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f8a7 	bl	8003730 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e8:	f000 f8f2 	bl	80007d0 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C1_Init+0x50>)
 800063a:	f000 ffe1 	bl	8001600 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f8c4 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008c 	.word	0x2000008c
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_SPI1_Init+0x68>)
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <MX_SPI1_Init+0x6c>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_SPI1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000676:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000686:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800068a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI1_Init+0x68>)
 800068e:	2218      	movs	r2, #24
 8000690:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006ac:	f003 fa0c 	bl	8003ac8 <HAL_SPI_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006b6:	f000 f88b 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <MX_GPIO_Init+0xfc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a37      	ldr	r2, [pc, #220]	; (80007c4 <MX_GPIO_Init+0xfc>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <MX_GPIO_Init+0xfc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_GPIO_Init+0xfc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a30      	ldr	r2, [pc, #192]	; (80007c4 <MX_GPIO_Init+0xfc>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xfc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_GPIO_Init+0xfc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a29      	ldr	r2, [pc, #164]	; (80007c4 <MX_GPIO_Init+0xfc>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xfc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_GPIO_Init+0xfc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xfc>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_GPIO_Init+0xfc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_GPIO_Port, ON_BOARD_LED_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0x100>)
 8000756:	f000 ff1f 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	481a      	ldr	r0, [pc, #104]	; (80007cc <MX_GPIO_Init+0x104>)
 8000762:	f000 ff19 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ON_BOARD_LED_Pin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_GPIO_Init+0x100>)
 8000780:	f000 fd86 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOWN_BTN_Pin UP_BTN_Pin CENTER_BTN_Pin LEFT_BTN_Pin
                           RIGHT_BTN_Pin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|CENTER_BTN_Pin|LEFT_BTN_Pin
 8000784:	233e      	movs	r3, #62	; 0x3e
 8000786:	617b      	str	r3, [r7, #20]
                          |RIGHT_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000788:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0x104>)
 800079a:	f000 fd79 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0x104>)
 80007b8:	f000 fd6a 	bl	8001290 <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>

080007da <MAX7219_Multi_Init>:
	{
		MAX7219_Write(i,i);
	}
}
void MAX7219_Multi_Init(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
	MAX7219_Write(DECODE_MODE_REG, 0); //No BCD Decoding
 80007e0:	2100      	movs	r1, #0
 80007e2:	2009      	movs	r0, #9
 80007e4:	f000 f826 	bl	8000834 <MAX7219_Write>
	MAX7219_Write(INTENSITY_REG, INTENSITY_15_IN_32);
 80007e8:	2107      	movs	r1, #7
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 f822 	bl	8000834 <MAX7219_Write>
	MAX7219_Write(SCAN_LIMIT_REG, SCAN_LIMIT_ALL_DIGITS); //Display all digits
 80007f0:	2107      	movs	r1, #7
 80007f2:	200b      	movs	r0, #11
 80007f4:	f000 f81e 	bl	8000834 <MAX7219_Write>
	MAX7219_Write(SHUTDOWN_REG, SHUTDOWN_DISABLE); //Noraml Operation
 80007f8:	2101      	movs	r1, #1
 80007fa:	200c      	movs	r0, #12
 80007fc:	f000 f81a 	bl	8000834 <MAX7219_Write>
	MAX7219_Write(DISPLAY_TEST_REG, 0); //Noraml Operation - No test mode
 8000800:	2100      	movs	r1, #0
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f816 	bl	8000834 <MAX7219_Write>
	for(int i=1; i<=8; i++)
 8000808:	2301      	movs	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	e00a      	b.n	8000824 <MAX7219_Multi_Init+0x4a>
	{
		MAX7219_Write(i,i);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f80b 	bl	8000834 <MAX7219_Write>
	for(int i=1; i<=8; i++)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3301      	adds	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b08      	cmp	r3, #8
 8000828:	ddf1      	ble.n	800080e <MAX7219_Multi_Init+0x34>
	}
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <MAX7219_Write>:

void MAX7219_Write(uint8_t reg_addr, uint8_t reg_data)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
	uint16_t SPI_DATA = (reg_addr<<8) | reg_data;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21a      	sxth	r2, r3
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	b21b      	sxth	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29b      	uxth	r3, r3
 8000854:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <MAX7219_Write+0x50>)
 800085e:	f000 fe9b 	bl	8001598 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&SPI_DATA, 1, 100);
 8000862:	f107 010e 	add.w	r1, r7, #14
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	2201      	movs	r2, #1
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <MAX7219_Write+0x54>)
 800086c:	f003 f9b5 	bl	8003bda <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MAX7219_Write+0x50>)
 8000878:	f000 fe8e 	bl	8001598 <HAL_GPIO_WritePin>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000
 8000888:	200000e0 	.word	0x200000e0

0800088c <MAX7219_Multi_Write>:
void MAX7219_Multi_Write(uint8_t reg_addr, uint8_t* reg_data)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MAX7219_Multi_Write+0x64>)
 80008a0:	f000 fe7a 	bl	8001598 <HAL_GPIO_WritePin>
	for(int i=0; i<MAX7219_DEVICES_CNT; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e015      	b.n	80008d6 <MAX7219_Multi_Write+0x4a>
	{
		uint16_t SPI_DATA = (reg_addr<<8) | reg_data[i];
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6839      	ldr	r1, [r7, #0]
 80008b4:	440b      	add	r3, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	b29b      	uxth	r3, r3
 80008c0:	817b      	strh	r3, [r7, #10]
		HAL_SPI_Transmit(&hspi1, (uint8_t*)&SPI_DATA, 1, 100);
 80008c2:	f107 010a 	add.w	r1, r7, #10
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	2201      	movs	r2, #1
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <MAX7219_Multi_Write+0x68>)
 80008cc:	f003 f985 	bl	8003bda <HAL_SPI_Transmit>
	for(int i=0; i<MAX7219_DEVICES_CNT; i++)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	dde6      	ble.n	80008aa <MAX7219_Multi_Write+0x1e>
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MAX7219_Multi_Write+0x64>)
 80008e4:	f000 fe58 	bl	8001598 <HAL_GPIO_WritePin>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40020000 	.word	0x40020000
 80008f4:	200000e0 	.word	0x200000e0

080008f8 <MAX7219_Scroll_Text>:
		}
		MAX7219_Multi_Write(row+1,(uint8_t *) &MAX7219_Rowdata);
	}
}
void MAX7219_Scroll_Text(char *text, uint32_t speed)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08f      	sub	sp, #60	; 0x3c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	uint32_t length = strlen(text);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fc68 	bl	80001d8 <strlen>
 8000908:	61b8      	str	r0, [r7, #24]
	//	uint8_t MAX7219_data[19+4][8] = {0}; // static size allocation
	uint8_t **MAX7219_data;
	MAX7219_data = (uint8_t**)malloc(sizeof(uint8_t*)*(length+4));
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	3304      	adds	r3, #4
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fcb1 	bl	8004278 <malloc>
 8000916:	4603      	mov	r3, r0
 8000918:	617b      	str	r3, [r7, #20]
	for(int i =0;i<(length+4); i++)
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
 800091e:	e00b      	b.n	8000938 <MAX7219_Scroll_Text+0x40>
	{
		MAX7219_data[i] = (uint8_t*)malloc(sizeof(uint8_t)*8);
 8000920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	18d4      	adds	r4, r2, r3
 8000928:	2008      	movs	r0, #8
 800092a:	f003 fca5 	bl	8004278 <malloc>
 800092e:	4603      	mov	r3, r0
 8000930:	6023      	str	r3, [r4, #0]
	for(int i =0;i<(length+4); i++)
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	3301      	adds	r3, #1
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	1d1a      	adds	r2, r3, #4
 800093c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093e:	429a      	cmp	r2, r3
 8000940:	d8ee      	bhi.n	8000920 <MAX7219_Scroll_Text+0x28>
	}
	for(uint8_t i = 0; (i<length) && (text[i] != '\0'); i++)
 8000942:	2300      	movs	r3, #0
 8000944:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000948:	e03a      	b.n	80009c0 <MAX7219_Scroll_Text+0xc8>
	{
		uint8_t ind = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		if(text[i] == 32)
 8000950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b20      	cmp	r3, #32
 800095c:	d103      	bne.n	8000966 <MAX7219_Scroll_Text+0x6e>
		{
			ind = 26;
 800095e:	231a      	movs	r3, #26
 8000960:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000964:	e007      	b.n	8000976 <MAX7219_Scroll_Text+0x7e>
		}
		else
		{
			ind = text[i] - 'A';
 8000966:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3b41      	subs	r3, #65	; 0x41
 8000972:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		}
		for(uint8_t j = 0; j<=7; j++)
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800097c:	e017      	b.n	80009ae <MAX7219_Scroll_Text+0xb6>
		{
			MAX7219_data[i][j] = font[ind][j];
 800097e:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8000982:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	4403      	add	r3, r0
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000996:	4403      	add	r3, r0
 8000998:	487b      	ldr	r0, [pc, #492]	; (8000b88 <MAX7219_Scroll_Text+0x290>)
 800099a:	00c9      	lsls	r1, r1, #3
 800099c:	4401      	add	r1, r0
 800099e:	440a      	add	r2, r1
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j<=7; j++)
 80009a4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009a8:	3301      	adds	r3, #1
 80009aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80009ae:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d9e3      	bls.n	800097e <MAX7219_Scroll_Text+0x86>
	for(uint8_t i = 0; (i<length) && (text[i] != '\0'); i++)
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ba:	3301      	adds	r3, #1
 80009bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80009c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d906      	bls.n	80009d8 <MAX7219_Scroll_Text+0xe0>
 80009ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1b8      	bne.n	800094a <MAX7219_Scroll_Text+0x52>
		}
	}
	for(uint8_t i = length; (i<length+4) ; i++)
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80009de:	e025      	b.n	8000a2c <MAX7219_Scroll_Text+0x134>
	{
		uint8_t ind = 26;
 80009e0:	231a      	movs	r3, #26
 80009e2:	747b      	strb	r3, [r7, #17]
		for(uint8_t j = 0; j<=7; j++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80009ea:	e016      	b.n	8000a1a <MAX7219_Scroll_Text+0x122>
		{
			MAX7219_data[i][j] = font[ind][j];
 80009ec:	7c79      	ldrb	r1, [r7, #17]
 80009ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	6978      	ldr	r0, [r7, #20]
 80009fa:	4403      	add	r3, r0
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a02:	4403      	add	r3, r0
 8000a04:	4860      	ldr	r0, [pc, #384]	; (8000b88 <MAX7219_Scroll_Text+0x290>)
 8000a06:	00c9      	lsls	r1, r1, #3
 8000a08:	4401      	add	r1, r0
 8000a0a:	440a      	add	r2, r1
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j<=7; j++)
 8000a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a14:	3301      	adds	r3, #1
 8000a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	d9e4      	bls.n	80009ec <MAX7219_Scroll_Text+0xf4>
	for(uint8_t i = length; (i<length+4) ; i++)
 8000a22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a26:	3301      	adds	r3, #1
 8000a28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000a2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	3304      	adds	r3, #4
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3d3      	bcc.n	80009e0 <MAX7219_Scroll_Text+0xe8>
		}
	}
	//	for(uint8_t shift = 0, shift_sub = 0; shift<(8*(MAX7219_DEVICES_CNT+1));shift++,shift_sub++)
	for(uint32_t shift = 0, shift_sub = 0; shift<(8*(length));shift++,shift_sub++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a40:	e083      	b.n	8000b4a <MAX7219_Scroll_Text+0x252>
	{
		uint8_t module_sub = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t quot = shift/8;
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	74fb      	strb	r3, [r7, #19]
		uint8_t rem = shift%8;
 8000a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	74bb      	strb	r3, [r7, #18]
		if((quot==0) &&(rem==shift))
 8000a58:	7cfb      	ldrb	r3, [r7, #19]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d109      	bne.n	8000a72 <MAX7219_Scroll_Text+0x17a>
 8000a5e:	7cbb      	ldrb	r3, [r7, #18]
 8000a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d105      	bne.n	8000a72 <MAX7219_Scroll_Text+0x17a>
		{
			module_sub = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			shift_sub = shift;
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a70:	e00e      	b.n	8000a90 <MAX7219_Scroll_Text+0x198>
		}
		else if(rem==0)
 8000a72:	7cbb      	ldrb	r3, [r7, #18]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d106      	bne.n	8000a86 <MAX7219_Scroll_Text+0x18e>
		{
			module_sub = quot-1;
 8000a78:	7cfb      	ldrb	r3, [r7, #19]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			shift_sub = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	e004      	b.n	8000a90 <MAX7219_Scroll_Text+0x198>
		}
		else
		{
			module_sub = quot;
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			shift_sub = rem;
 8000a8c:	7cbb      	ldrb	r3, [r7, #18]
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		uint8_t MAX7219_Rowdata[MAX7219_DEVICES_CNT];
		for(uint8_t row=0; row<8; row++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000a96:	e04b      	b.n	8000b30 <MAX7219_Scroll_Text+0x238>
		{
			for(uint8_t module = 0; module<(MAX7219_DEVICES_CNT); module++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000a9e:	e034      	b.n	8000b0a <MAX7219_Scroll_Text+0x212>
			{
				MAX7219_Rowdata[module]=(MAX7219_data[module_sub+module][row]<<shift_sub) | (MAX7219_data[module_sub+module+1][row]>>(8-shift_sub));
 8000aa0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000aa4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	4413      	add	r3, r2
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000ac8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000acc:	440b      	add	r3, r1
 8000ace:	3301      	adds	r3, #1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	6979      	ldr	r1, [r7, #20]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	6819      	ldr	r1, [r3, #0]
 8000ad8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000adc:	440b      	add	r3, r1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	f1c3 0308 	rsb	r3, r3, #8
 8000ae8:	fa41 f303 	asr.w	r3, r1, r3
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	3338      	adds	r3, #56	; 0x38
 8000afa:	443b      	add	r3, r7
 8000afc:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for(uint8_t module = 0; module<(MAX7219_DEVICES_CNT); module++)
 8000b00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b04:	3301      	adds	r3, #1
 8000b06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000b0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d9c6      	bls.n	8000aa0 <MAX7219_Scroll_Text+0x1a8>
			}
			MAX7219_Multi_Write(row+1,(uint8_t *) &MAX7219_Rowdata);
 8000b12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f107 020c 	add.w	r2, r7, #12
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff feb3 	bl	800088c <MAX7219_Multi_Write>
		for(uint8_t row=0; row<8; row++)
 8000b26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000b30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	d9af      	bls.n	8000a98 <MAX7219_Scroll_Text+0x1a0>
		}
		HAL_Delay(speed);
 8000b38:	6838      	ldr	r0, [r7, #0]
 8000b3a:	f000 fa43 	bl	8000fc4 <HAL_Delay>
	for(uint32_t shift = 0, shift_sub = 0; shift<(8*(length));shift++,shift_sub++)
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	3301      	adds	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	3301      	adds	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f4ff af76 	bcc.w	8000a42 <MAX7219_Scroll_Text+0x14a>
	}
	for(int i =0;i<length; i++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e00a      	b.n	8000b72 <MAX7219_Scroll_Text+0x27a>
	{
		free(MAX7219_data[i]);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	4413      	add	r3, r2
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fb8e 	bl	8004288 <free>
	for(int i =0;i<length; i++)
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d8f0      	bhi.n	8000b5c <MAX7219_Scroll_Text+0x264>
	}
	free(MAX7219_data);
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f003 fb84 	bl	8004288 <free>
}
 8000b80:	bf00      	nop
 8000b82:	373c      	adds	r7, #60	; 0x3c
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd90      	pop	{r4, r7, pc}
 8000b88:	080044f4 	.word	0x080044f4

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_I2C_MspInit+0xa4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d13b      	bne.n	8000c76 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1a:	23c0      	movs	r3, #192	; 0xc0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c36:	f000 fb2b 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201f      	movs	r0, #31
 8000c5c:	f000 fab1 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c60:	201f      	movs	r0, #31
 8000c62:	f000 faca 	bl	80011fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2020      	movs	r0, #32
 8000c6c:	f000 faa9 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c70:	2020      	movs	r0, #32
 8000c72:	f000 fac2 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400

08000c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <HAL_SPI_MspInit+0xd0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d152      	bne.n	8000d54 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d14:	2305      	movs	r3, #5
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <HAL_SPI_MspInit+0xd8>)
 8000d20:	f000 fab6 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d24:	2338      	movs	r3, #56	; 0x38
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d34:	2305      	movs	r3, #5
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <HAL_SPI_MspInit+0xdc>)
 8000d40:	f000 faa6 	bl	8001290 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2023      	movs	r0, #35	; 0x23
 8000d4a:	f000 fa3a 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d4e:	2023      	movs	r0, #35	; 0x23
 8000d50:	f000 fa53 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8e4 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <I2C1_EV_IRQHandler+0x10>)
 8000dc6:	f000 fd5f 	bl	8001888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000008c 	.word	0x2000008c

08000dd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <I2C1_ER_IRQHandler+0x10>)
 8000dda:	f000 fec6 	bl	8001b6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000008c 	.word	0x2000008c

08000de8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <SPI1_IRQHandler+0x10>)
 8000dee:	f003 f831 	bl	8003e54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000e0 	.word	0x200000e0

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f003 f9fa 	bl	8004224 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	20000138 	.word	0x20000138
 8000e64:	20000150 	.word	0x20000150

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff ffd7 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f003 f9b9 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb15 	bl	80004ec <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ed0:	080045f4 	.word	0x080045f4
  ldr r2, =_sbss
 8000ed4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed8:	20000150 	.word	0x20000150

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f94f 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fe3a 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f967 	bl	8001216 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f92f 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	2000013c 	.word	0x2000013c

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000013c 	.word	0x2000013c

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d004      	beq.n	800124c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e00c      	b.n	8001266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2205      	movs	r2, #5
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001280:	b2db      	uxtb	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e159      	b.n	8001560 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8148 	bne.w	800155a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a2 	beq.w	800155a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b54      	ldr	r3, [pc, #336]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a52      	ldr	r2, [pc, #328]	; (800157c <HAL_GPIO_Init+0x2ec>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_GPIO_Init+0x2f0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x202>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2f4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x1fe>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a47      	ldr	r2, [pc, #284]	; (8001588 <HAL_GPIO_Init+0x2f8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x1fa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_GPIO_Init+0x2fc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x1f6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a45      	ldr	r2, [pc, #276]	; (8001590 <HAL_GPIO_Init+0x300>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x1f2>
 800147e:	2304      	movs	r3, #4
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x204>
 8001482:	2307      	movs	r3, #7
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x204>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x204>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x204>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x204>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d6:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001500:	4a24      	ldr	r2, [pc, #144]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800152a:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <HAL_GPIO_Init+0x304>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f aea2 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40013c00 	.word	0x40013c00

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015dc:	887a      	ldrh	r2, [r7, #2]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	041a      	lsls	r2, r3, #16
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	400b      	ands	r3, r1
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e12b      	b.n	800186a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fad8 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001664:	f002 fa1c 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a81      	ldr	r2, [pc, #516]	; (8001874 <HAL_I2C_Init+0x274>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d807      	bhi.n	8001684 <HAL_I2C_Init+0x84>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a80      	ldr	r2, [pc, #512]	; (8001878 <HAL_I2C_Init+0x278>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	e006      	b.n	8001692 <HAL_I2C_Init+0x92>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a7d      	ldr	r2, [pc, #500]	; (800187c <HAL_I2C_Init+0x27c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	bf94      	ite	ls
 800168c:	2301      	movls	r3, #1
 800168e:	2300      	movhi	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e7      	b.n	800186a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a78      	ldr	r2, [pc, #480]	; (8001880 <HAL_I2C_Init+0x280>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_I2C_Init+0x274>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d802      	bhi.n	80016d4 <HAL_I2C_Init+0xd4>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	e009      	b.n	80016e8 <HAL_I2C_Init+0xe8>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4a69      	ldr	r2, [pc, #420]	; (8001884 <HAL_I2C_Init+0x284>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	3301      	adds	r3, #1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	495c      	ldr	r1, [pc, #368]	; (8001874 <HAL_I2C_Init+0x274>)
 8001704:	428b      	cmp	r3, r1
 8001706:	d819      	bhi.n	800173c <HAL_I2C_Init+0x13c>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e59      	subs	r1, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fbb1 f3f3 	udiv	r3, r1, r3
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800171c:	400b      	ands	r3, r1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <HAL_I2C_Init+0x138>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e59      	subs	r1, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001736:	e051      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 8001738:	2304      	movs	r3, #4
 800173a:	e04f      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <HAL_I2C_Init+0x168>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1e58      	subs	r0, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	e012      	b.n	800178e <HAL_I2C_Init+0x18e>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	0099      	lsls	r1, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x196>
 8001792:	2301      	movs	r3, #1
 8001794:	e022      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <HAL_I2C_Init+0x1bc>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e58      	subs	r0, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	440b      	add	r3, r1
 80017ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ba:	e00f      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	6809      	ldr	r1, [r1, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800180a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6911      	ldr	r1, [r2, #16]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68d2      	ldr	r2, [r2, #12]
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	000186a0 	.word	0x000186a0
 8001878:	001e847f 	.word	0x001e847f
 800187c:	003d08ff 	.word	0x003d08ff
 8001880:	431bde83 	.word	0x431bde83
 8001884:	10624dd3 	.word	0x10624dd3

08001888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d003      	beq.n	80018c0 <HAL_I2C_EV_IRQHandler+0x38>
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	f040 80c1 	bne.w	8001a42 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10d      	bne.n	80018f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80018e0:	d003      	beq.n	80018ea <HAL_I2C_EV_IRQHandler+0x62>
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_EV_IRQHandler+0x66>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_I2C_EV_IRQHandler+0x68>
 80018ee:	2300      	movs	r3, #0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f000 8132 	beq.w	8001b5a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00c      	beq.n	800191a <HAL_I2C_EV_IRQHandler+0x92>
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	0a5b      	lsrs	r3, r3, #9
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f001 fc7b 	bl	8003208 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fd83 	bl	800241e <I2C_Master_SB>
 8001918:	e092      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_I2C_EV_IRQHandler+0xb2>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	0a5b      	lsrs	r3, r3, #9
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fdf9 	bl	800252a <I2C_Master_ADD10>
 8001938:	e082      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_I2C_EV_IRQHandler+0xd2>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	0a5b      	lsrs	r3, r3, #9
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fe13 	bl	800257e <I2C_Master_ADDR>
 8001958:	e072      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d03b      	beq.n	80019de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001974:	f000 80f3 	beq.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	09db      	lsrs	r3, r3, #7
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00f      	beq.n	80019a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f9f3 	bl	8001d88 <I2C_MasterTransmit_TXE>
 80019a2:	e04d      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80d6 	beq.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	0a5b      	lsrs	r3, r3, #9
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80cf 	beq.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80019c0:	7bbb      	ldrb	r3, [r7, #14]
 80019c2:	2b21      	cmp	r3, #33	; 0x21
 80019c4:	d103      	bne.n	80019ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fa7a 	bl	8001ec0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019cc:	e0c7      	b.n	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	f040 80c4 	bne.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fae8 	bl	8001fac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019dc:	e0bf      	b.n	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ec:	f000 80b7 	beq.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00f      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x194>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	0a9b      	lsrs	r3, r3, #10
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x194>
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb5d 	bl	80020d4 <I2C_MasterReceive_RXNE>
 8001a1a:	e011      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 809a 	beq.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	0a5b      	lsrs	r3, r3, #9
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8093 	beq.w	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fc06 	bl	800224a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a3e:	e08e      	b.n	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a40:	e08d      	b.n	8001b5e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e007      	b.n	8001a64 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d012      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0x20e>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	0a5b      	lsrs	r3, r3, #9
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a8c:	69b9      	ldr	r1, [r7, #24]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 ffc4 	bl	8002a1c <I2C_Slave_ADDR>
 8001a94:	e066      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_I2C_EV_IRQHandler+0x22e>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0a5b      	lsrs	r3, r3, #9
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fffe 	bl	8002ab0 <I2C_Slave_STOPF>
 8001ab4:	e056      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	2b21      	cmp	r3, #33	; 0x21
 8001aba:	d002      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x23a>
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	2b29      	cmp	r3, #41	; 0x29
 8001ac0:	d125      	bne.n	8001b0e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	09db      	lsrs	r3, r3, #7
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00f      	beq.n	8001aee <HAL_I2C_EV_IRQHandler+0x266>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	0a9b      	lsrs	r3, r3, #10
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_I2C_EV_IRQHandler+0x266>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 feda 	bl	80028a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aec:	e039      	b.n	8001b62 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d033      	beq.n	8001b62 <HAL_I2C_EV_IRQHandler+0x2da>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	0a5b      	lsrs	r3, r3, #9
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d02d      	beq.n	8001b62 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 ff07 	bl	800291a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b0c:	e029      	b.n	8001b62 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00f      	beq.n	8001b3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	0a9b      	lsrs	r3, r3, #10
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 ff12 	bl	800295c <I2C_SlaveReceive_RXNE>
 8001b38:	e014      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	0a5b      	lsrs	r3, r3, #9
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 ff40 	bl	80029d8 <I2C_SlaveReceive_BTF>
 8001b58:	e004      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001b5a:	bf00      	nop
 8001b5c:	e002      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b8c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00e      	beq.n	8001bb8 <HAL_I2C_ER_IRQHandler+0x4e>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001bb6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	0a5b      	lsrs	r3, r3, #9
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <HAL_I2C_ER_IRQHandler+0x78>
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001be0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	0a9b      	lsrs	r3, r3, #10
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03f      	beq.n	8001c6e <HAL_I2C_ER_IRQHandler+0x104>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d039      	beq.n	8001c6e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001bfa:	7efb      	ldrb	r3, [r7, #27]
 8001bfc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001c14:	7ebb      	ldrb	r3, [r7, #26]
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d112      	bne.n	8001c40 <HAL_I2C_ER_IRQHandler+0xd6>
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <HAL_I2C_ER_IRQHandler+0xd6>
 8001c20:	7cfb      	ldrb	r3, [r7, #19]
 8001c22:	2b21      	cmp	r3, #33	; 0x21
 8001c24:	d008      	beq.n	8001c38 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	2b29      	cmp	r3, #41	; 0x29
 8001c2a:	d005      	beq.n	8001c38 <HAL_I2C_ER_IRQHandler+0xce>
 8001c2c:	7cfb      	ldrb	r3, [r7, #19]
 8001c2e:	2b28      	cmp	r3, #40	; 0x28
 8001c30:	d106      	bne.n	8001c40 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b21      	cmp	r3, #33	; 0x21
 8001c36:	d103      	bne.n	8001c40 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 f869 	bl	8002d10 <I2C_Slave_AF>
 8001c3e:	e016      	b.n	8001c6e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c48:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c52:	7efb      	ldrb	r3, [r7, #27]
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d002      	beq.n	8001c5e <HAL_I2C_ER_IRQHandler+0xf4>
 8001c58:	7efb      	ldrb	r3, [r7, #27]
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d107      	bne.n	8001c6e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	0adb      	lsrs	r3, r3, #11
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00e      	beq.n	8001c98 <HAL_I2C_ER_IRQHandler+0x12e>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001c96:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f001 f8a0 	bl	8002df0 <I2C_ITError>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
 8001d14:	4613      	mov	r3, r2
 8001d16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d150      	bne.n	8001e50 <I2C_MasterTransmit_TXE+0xc8>
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b21      	cmp	r3, #33	; 0x21
 8001db2:	d14d      	bne.n	8001e50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d01d      	beq.n	8001df6 <I2C_MasterTransmit_TXE+0x6e>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d01a      	beq.n	8001df6 <I2C_MasterTransmit_TXE+0x6e>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dc6:	d016      	beq.n	8001df6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2211      	movs	r2, #17
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff62 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001df4:	e060      	b.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d107      	bne.n	8001e40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff7d 	bl	8001d38 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e3e:	e03b      	b.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff35 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e4e:	e033      	b.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b21      	cmp	r3, #33	; 0x21
 8001e54:	d005      	beq.n	8001e62 <I2C_MasterTransmit_TXE+0xda>
 8001e56:	7bbb      	ldrb	r3, [r7, #14]
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d12d      	bne.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b22      	cmp	r3, #34	; 0x22
 8001e60:	d12a      	bne.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d108      	bne.n	8001e7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e7c:	e01c      	b.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d103      	bne.n	8001e92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f88e 	bl	8001fac <I2C_MemoryTransmit_TXE_BTF>
}
 8001e90:	e012      	b.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001eb6:	e7ff      	b.n	8001eb8 <I2C_MasterTransmit_TXE+0x130>
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b21      	cmp	r3, #33	; 0x21
 8001ed8:	d164      	bne.n	8001fa4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d012      	beq.n	8001f0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001f08:	e04c      	b.n	8001fa4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d01d      	beq.n	8001f4c <I2C_MasterTransmit_BTF+0x8c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d01a      	beq.n	8001f4c <I2C_MasterTransmit_BTF+0x8c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f1c:	d016      	beq.n	8001f4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2211      	movs	r2, #17
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff feb7 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
}
 8001f4a:	e02b      	b.n	8001fa4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d107      	bne.n	8001f96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fed2 	bl	8001d38 <HAL_I2C_MemTxCpltCallback>
}
 8001f94:	e006      	b.n	8001fa4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fe8a 	bl	8001cb8 <HAL_I2C_MasterTxCpltCallback>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11d      	bne.n	8002000 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10b      	bne.n	8001fe4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001fe2:	e073      	b.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	121b      	asrs	r3, r3, #8
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ffe:	e065      	b.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10b      	bne.n	8002020 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	b2da      	uxtb	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800201e:	e055      	b.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002024:	2b02      	cmp	r3, #2
 8002026:	d151      	bne.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b22      	cmp	r3, #34	; 0x22
 800202c:	d10d      	bne.n	800204a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002048:	e040      	b.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b21      	cmp	r3, #33	; 0x21
 8002058:	d112      	bne.n	8002080 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800207e:	e025      	b.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d120      	bne.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b21      	cmp	r3, #33	; 0x21
 800208e:	d11d      	bne.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800209e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fe36 	bl	8001d38 <HAL_I2C_MemTxCpltCallback>
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b22      	cmp	r3, #34	; 0x22
 80020e6:	f040 80ac 	bne.w	8002242 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d921      	bls.n	800213c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b03      	cmp	r3, #3
 8002126:	f040 808c 	bne.w	8002242 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002138:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800213a:	e082      	b.n	8002242 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b02      	cmp	r3, #2
 8002142:	d075      	beq.n	8002230 <I2C_MasterReceive_RXNE+0x15c>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d002      	beq.n	8002150 <I2C_MasterReceive_RXNE+0x7c>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d16f      	bne.n	8002230 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f001 f827 	bl	80031a4 <I2C_WaitOnSTOPRequestThroughIT>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d142      	bne.n	80021e2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800217a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d10a      	bne.n	80021cc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fdc1 	bl	8001d4c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021ca:	e03a      	b.n	8002242 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2212      	movs	r2, #18
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fd76 	bl	8001ccc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021e0:	e02f      	b.n	8002242 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fd99 	bl	8001d60 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800222e:	e008      	b.n	8002242 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223e:	605a      	str	r2, [r3, #4]
}
 8002240:	e7ff      	b.n	8002242 <I2C_MasterReceive_RXNE+0x16e>
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b04      	cmp	r3, #4
 8002260:	d11b      	bne.n	800229a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002270:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002298:	e0bd      	b.n	8002416 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d129      	bne.n	80022f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00a      	beq.n	80022d0 <I2C_MasterReceive_BTF+0x86>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d007      	beq.n	80022d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022f6:	e08e      	b.n	8002416 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d176      	bne.n	80023f0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d002      	beq.n	800230e <I2C_MasterReceive_BTF+0xc4>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b10      	cmp	r3, #16
 800230c:	d108      	bne.n	8002320 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e019      	b.n	8002354 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b04      	cmp	r3, #4
 8002324:	d002      	beq.n	800232c <I2C_MasterReceive_BTF+0xe2>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d108      	bne.n	800233e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e00a      	b.n	8002354 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b10      	cmp	r3, #16
 8002342:	d007      	beq.n	8002354 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d10a      	bne.n	80023da <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fcba 	bl	8001d4c <HAL_I2C_MemRxCpltCallback>
}
 80023d8:	e01d      	b.n	8002416 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2212      	movs	r2, #18
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fc6f 	bl	8001ccc <HAL_I2C_MasterRxCpltCallback>
}
 80023ee:	e012      	b.n	8002416 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d117      	bne.n	8002462 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800244a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800244c:	e067      	b.n	800251e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
}
 8002460:	e05d      	b.n	800251e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246a:	d133      	bne.n	80024d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b21      	cmp	r3, #33	; 0x21
 8002476:	d109      	bne.n	800248c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002488:	611a      	str	r2, [r3, #16]
 800248a:	e008      	b.n	800249e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	b2da      	uxtb	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <I2C_Master_SB+0x92>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d032      	beq.n	800251e <I2C_Master_SB+0x100>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d02d      	beq.n	800251e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d0:	605a      	str	r2, [r3, #4]
}
 80024d2:	e024      	b.n	800251e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10e      	bne.n	80024fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	11db      	asrs	r3, r3, #7
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f003 0306 	and.w	r3, r3, #6
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f063 030f 	orn	r3, r3, #15
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]
}
 80024f8:	e011      	b.n	800251e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10d      	bne.n	800251e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	b29b      	uxth	r3, r3
 8002508:	11db      	asrs	r3, r3, #7
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 0306 	and.w	r3, r3, #6
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f063 030e 	orn	r3, r3, #14
 8002516:	b2da      	uxtb	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	611a      	str	r2, [r3, #16]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	b2da      	uxtb	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <I2C_Master_ADD10+0x26>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d108      	bne.n	8002562 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00c      	beq.n	8002572 <I2C_Master_ADD10+0x48>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002570:	605a      	str	r2, [r3, #4]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800257e:	b480      	push	{r7}
 8002580:	b091      	sub	sp, #68	; 0x44
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800258c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b22      	cmp	r3, #34	; 0x22
 80025a6:	f040 8169 	bne.w	800287c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <I2C_Master_ADDR+0x54>
 80025b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d10b      	bne.n	80025d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ba:	2300      	movs	r3, #0
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	e160      	b.n	8002894 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <I2C_Master_ADDR+0x98>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025e2:	d118      	bne.n	8002616 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002608:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	651a      	str	r2, [r3, #80]	; 0x50
 8002614:	e13e      	b.n	8002894 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d113      	bne.n	8002648 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e115      	b.n	8002874 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	f040 808a 	bne.w	8002768 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800265a:	d137      	bne.n	80026cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267a:	d113      	bne.n	80026a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	e0e7      	b.n	8002874 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e0d3      	b.n	8002874 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d02e      	beq.n	8002730 <I2C_Master_ADDR+0x1b2>
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d02b      	beq.n	8002730 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d102      	bne.n	80026e4 <I2C_Master_ADDR+0x166>
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d125      	bne.n	8002730 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d00e      	beq.n	8002708 <I2C_Master_ADDR+0x18a>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d00b      	beq.n	8002708 <I2C_Master_ADDR+0x18a>
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d008      	beq.n	8002708 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e007      	b.n	8002718 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002716:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	e0a1      	b.n	8002874 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e085      	b.n	8002874 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d14d      	bne.n	800280e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	2b04      	cmp	r3, #4
 8002776:	d016      	beq.n	80027a6 <I2C_Master_ADDR+0x228>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	2b02      	cmp	r3, #2
 800277c:	d013      	beq.n	80027a6 <I2C_Master_ADDR+0x228>
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	2b10      	cmp	r3, #16
 8002782:	d010      	beq.n	80027a6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002792:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e007      	b.n	80027b6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c4:	d117      	bne.n	80027f6 <I2C_Master_ADDR+0x278>
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027cc:	d00b      	beq.n	80027e6 <I2C_Master_ADDR+0x268>
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d008      	beq.n	80027e6 <I2C_Master_ADDR+0x268>
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d005      	beq.n	80027e6 <I2C_Master_ADDR+0x268>
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d002      	beq.n	80027e6 <I2C_Master_ADDR+0x268>
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d107      	bne.n	80027f6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	e032      	b.n	8002874 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800281c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282c:	d117      	bne.n	800285e <I2C_Master_ADDR+0x2e0>
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002834:	d00b      	beq.n	800284e <I2C_Master_ADDR+0x2d0>
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	2b01      	cmp	r3, #1
 800283a:	d008      	beq.n	800284e <I2C_Master_ADDR+0x2d0>
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	2b08      	cmp	r3, #8
 8002840:	d005      	beq.n	800284e <I2C_Master_ADDR+0x2d0>
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2b10      	cmp	r3, #16
 8002846:	d002      	beq.n	800284e <I2C_Master_ADDR+0x2d0>
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	2b20      	cmp	r3, #32
 800284c:	d107      	bne.n	800285e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800285c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800287a:	e00b      	b.n	8002894 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	e7ff      	b.n	8002894 <I2C_Master_ADDR+0x316>
 8002894:	bf00      	nop
 8002896:	3744      	adds	r7, #68	; 0x44
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02b      	beq.n	8002912 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d114      	bne.n	8002912 <I2C_SlaveTransmit_TXE+0x72>
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b29      	cmp	r3, #41	; 0x29
 80028ec:	d111      	bne.n	8002912 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2221      	movs	r2, #33	; 0x21
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2228      	movs	r2, #40	; 0x28
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff f9e7 	bl	8001ce0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d011      	beq.n	8002950 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d02c      	beq.n	80029d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d114      	bne.n	80029d0 <I2C_SlaveReceive_RXNE+0x74>
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b2a      	cmp	r3, #42	; 0x2a
 80029aa:	d111      	bne.n	80029d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2222      	movs	r2, #34	; 0x22
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2228      	movs	r2, #40	; 0x28
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff f992 	bl	8001cf4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a36:	2b28      	cmp	r3, #40	; 0x28
 8002a38:	d127      	bne.n	8002a8a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a48:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	09db      	lsrs	r3, r3, #7
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	81bb      	strh	r3, [r7, #12]
 8002a6c:	e002      	b.n	8002a74 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a7c:	89ba      	ldrh	r2, [r7, #12]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff f940 	bl	8001d08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a88:	e00e      	b.n	8002aa8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ace:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0c:	d172      	bne.n	8002bf4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b22      	cmp	r3, #34	; 0x22
 8002b12:	d002      	beq.n	8002b1a <I2C_Slave_STOPF+0x6a>
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b2a      	cmp	r3, #42	; 0x2a
 8002b18:	d135      	bne.n	8002b86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0204 	orr.w	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fb8d 	bl	8001272 <HAL_DMA_GetState>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d049      	beq.n	8002bf2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	4a69      	ldr	r2, [pc, #420]	; (8002d08 <I2C_Slave_STOPF+0x258>)
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fb5f 	bl	800122e <HAL_DMA_Abort_IT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03d      	beq.n	8002bf2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b80:	4610      	mov	r0, r2
 8002b82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b84:	e035      	b.n	8002bf2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fb57 	bl	8001272 <HAL_DMA_GetState>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d014      	beq.n	8002bf4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	4a4e      	ldr	r2, [pc, #312]	; (8002d08 <I2C_Slave_STOPF+0x258>)
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fb29 	bl	800122e <HAL_DMA_Abort_IT>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bec:	4610      	mov	r0, r2
 8002bee:	4798      	blx	r3
 8002bf0:	e000      	b.n	8002bf4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bf2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d03e      	beq.n	8002c7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d112      	bne.n	8002c32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d112      	bne.n	8002c66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0204 	orr.w	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8b3 	bl	8002df0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c8a:	e039      	b.n	8002d00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c90:	d109      	bne.n	8002ca6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2228      	movs	r2, #40	; 0x28
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff f827 	bl	8001cf4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b28      	cmp	r3, #40	; 0x28
 8002cb0:	d111      	bne.n	8002cd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <I2C_Slave_STOPF+0x25c>)
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff f828 	bl	8001d24 <HAL_I2C_ListenCpltCallback>
}
 8002cd4:	e014      	b.n	8002d00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	2b22      	cmp	r3, #34	; 0x22
 8002cdc:	d002      	beq.n	8002ce4 <I2C_Slave_STOPF+0x234>
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b22      	cmp	r3, #34	; 0x22
 8002ce2:	d10d      	bne.n	8002d00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fffa 	bl	8001cf4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	08003055 	.word	0x08003055
 8002d0c:	ffff0000 	.word	0xffff0000

08002d10 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d002      	beq.n	8002d32 <I2C_Slave_AF+0x22>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d129      	bne.n	8002d86 <I2C_Slave_AF+0x76>
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b28      	cmp	r3, #40	; 0x28
 8002d36:	d126      	bne.n	8002d86 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <I2C_Slave_AF+0xdc>)
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d4c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d56:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe ffd0 	bl	8001d24 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002d84:	e02e      	b.n	8002de4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b21      	cmp	r3, #33	; 0x21
 8002d8a:	d126      	bne.n	8002dda <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <I2C_Slave_AF+0xdc>)
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2221      	movs	r2, #33	; 0x21
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe ff84 	bl	8001ce0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002dd8:	e004      	b.n	8002de4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002de2:	615a      	str	r2, [r3, #20]
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	ffff0000 	.word	0xffff0000

08002df0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e08:	7bbb      	ldrb	r3, [r7, #14]
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d002      	beq.n	8002e14 <I2C_ITError+0x24>
 8002e0e:	7bbb      	ldrb	r3, [r7, #14]
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d10a      	bne.n	8002e2a <I2C_ITError+0x3a>
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b22      	cmp	r3, #34	; 0x22
 8002e18:	d107      	bne.n	8002e2a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e30:	2b28      	cmp	r3, #40	; 0x28
 8002e32:	d107      	bne.n	8002e44 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2228      	movs	r2, #40	; 0x28
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e42:	e015      	b.n	8002e70 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e52:	d00a      	beq.n	8002e6a <I2C_ITError+0x7a>
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b60      	cmp	r3, #96	; 0x60
 8002e58:	d007      	beq.n	8002e6a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7e:	d162      	bne.n	8002f46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d020      	beq.n	8002ee0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	4a6a      	ldr	r2, [pc, #424]	; (800304c <I2C_ITError+0x25c>)
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe f9bf 	bl	800122e <HAL_DMA_Abort_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8089 	beq.w	8002fca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eda:	4610      	mov	r0, r2
 8002edc:	4798      	blx	r3
 8002ede:	e074      	b.n	8002fca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	4a59      	ldr	r2, [pc, #356]	; (800304c <I2C_ITError+0x25c>)
 8002ee6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f99e 	bl	800122e <HAL_DMA_Abort_IT>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d068      	beq.n	8002fca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d10b      	bne.n	8002f1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f40:	4610      	mov	r0, r2
 8002f42:	4798      	blx	r3
 8002f44:	e041      	b.n	8002fca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b60      	cmp	r3, #96	; 0x60
 8002f50:	d125      	bne.n	8002f9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d10b      	bne.n	8002f86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0201 	bic.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe feec 	bl	8001d74 <HAL_I2C_AbortCpltCallback>
 8002f9c:	e015      	b.n	8002fca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d10b      	bne.n	8002fc4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fecb 	bl	8001d60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10e      	bne.n	8002ff8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d113      	bne.n	8003044 <I2C_ITError+0x254>
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b28      	cmp	r3, #40	; 0x28
 8003020:	d110      	bne.n	8003044 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <I2C_ITError+0x260>)
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe fe70 	bl	8001d24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	08003055 	.word	0x08003055
 8003050:	ffff0000 	.word	0xffff0000

08003054 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800306e:	4b4b      	ldr	r3, [pc, #300]	; (800319c <I2C_DMAAbort+0x148>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <I2C_DMAAbort+0x14c>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0a1a      	lsrs	r2, r3, #8
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00da      	lsls	r2, r3, #3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800309a:	e00a      	b.n	80030b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b0:	d0ea      	beq.n	8003088 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	2200      	movs	r2, #0
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	2200      	movs	r2, #0
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	2200      	movs	r2, #0
 80030f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2200      	movs	r2, #0
 8003106:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b60      	cmp	r3, #96	; 0x60
 8003122:	d10e      	bne.n	8003142 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f7fe fe1a 	bl	8001d74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003140:	e027      	b.n	8003192 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003148:	2b28      	cmp	r3, #40	; 0x28
 800314a:	d117      	bne.n	800317c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800316a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2228      	movs	r2, #40	; 0x28
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800317a:	e007      	b.n	800318c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800318c:	6978      	ldr	r0, [r7, #20]
 800318e:	f7fe fde7 	bl	8001d60 <HAL_I2C_ErrorCallback>
}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000000 	.word	0x20000000
 80031a0:	14f8b589 	.word	0x14f8b589

080031a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	08db      	lsrs	r3, r3, #3
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	0a1a      	lsrs	r2, r3, #8
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e008      	b.n	80031f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f0:	d0e9      	beq.n	80031c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000000 	.word	0x20000000
 8003204:	14f8b589 	.word	0x14f8b589

08003208 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003218:	d103      	bne.n	8003222 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003220:	e007      	b.n	8003232 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800322a:	d102      	bne.n	8003232 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2208      	movs	r2, #8
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e267      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d075      	beq.n	800334a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00c      	beq.n	8003284 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b85      	ldr	r3, [pc, #532]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003272:	2b08      	cmp	r3, #8
 8003274:	d112      	bne.n	800329c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003276:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003282:	d10b      	bne.n	800329c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	4b7e      	ldr	r3, [pc, #504]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d05b      	beq.n	8003348 <HAL_RCC_OscConfig+0x108>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d157      	bne.n	8003348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e242      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a4:	d106      	bne.n	80032b4 <HAL_RCC_OscConfig+0x74>
 80032a6:	4b76      	ldr	r3, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a75      	ldr	r2, [pc, #468]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e01d      	b.n	80032f0 <HAL_RCC_OscConfig+0xb0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x98>
 80032be:	4b70      	ldr	r3, [pc, #448]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6f      	ldr	r2, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b6d      	ldr	r3, [pc, #436]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6c      	ldr	r2, [pc, #432]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0xb0>
 80032d8:	4b69      	ldr	r3, [pc, #420]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a68      	ldr	r2, [pc, #416]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b66      	ldr	r3, [pc, #408]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80032ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fe58 	bl	8000fac <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003300:	f7fd fe54 	bl	8000fac <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e207      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0xc0>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fd fe44 	bl	8000fac <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003328:	f7fd fe40 	bl	8000fac <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	; 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1f3      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	4b51      	ldr	r3, [pc, #324]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0xe8>
 8003346:	e000      	b.n	800334a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d063      	beq.n	800341e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003356:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336a:	2b08      	cmp	r3, #8
 800336c:	d11c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336e:	4b44      	ldr	r3, [pc, #272]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d116      	bne.n	80033a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCC_OscConfig+0x152>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e1c7      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4937      	ldr	r1, [pc, #220]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a6:	e03a      	b.n	800341e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_RCC_OscConfig+0x244>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fd fdf9 	bl	8000fac <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033be:	f7fd fdf5 	bl	8000fac <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e1a8      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4925      	ldr	r1, [pc, #148]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x244>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fd fdd8 	bl	8000fac <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003400:	f7fd fdd4 	bl	8000fac <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e187      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d036      	beq.n	8003498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_RCC_OscConfig+0x248>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd fdb8 	bl	8000fac <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003440:	f7fd fdb4 	bl	8000fac <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e167      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_OscConfig+0x240>)
 8003454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x200>
 800345e:	e01b      	b.n	8003498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_RCC_OscConfig+0x248>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003466:	f7fd fda1 	bl	8000fac <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	e00e      	b.n	800348c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800346e:	f7fd fd9d 	bl	8000fac <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d907      	bls.n	800348c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e150      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
 8003480:	40023800 	.word	0x40023800
 8003484:	42470000 	.word	0x42470000
 8003488:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348c:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800348e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ea      	bne.n	800346e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8097 	beq.w	80035d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034aa:	4b81      	ldr	r3, [pc, #516]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10f      	bne.n	80034d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	4b7d      	ldr	r3, [pc, #500]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	4a7c      	ldr	r2, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6413      	str	r3, [r2, #64]	; 0x40
 80034c6:	4b7a      	ldr	r3, [pc, #488]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	4b77      	ldr	r3, [pc, #476]	; (80036b4 <HAL_RCC_OscConfig+0x474>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d118      	bne.n	8003514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e2:	4b74      	ldr	r3, [pc, #464]	; (80036b4 <HAL_RCC_OscConfig+0x474>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a73      	ldr	r2, [pc, #460]	; (80036b4 <HAL_RCC_OscConfig+0x474>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ee:	f7fd fd5d 	bl	8000fac <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fd fd59 	bl	8000fac <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e10c      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_OscConfig+0x474>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x2ea>
 800351c:	4b64      	ldr	r3, [pc, #400]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a63      	ldr	r2, [pc, #396]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	e01c      	b.n	8003564 <HAL_RCC_OscConfig+0x324>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b05      	cmp	r3, #5
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x30c>
 8003532:	4b5f      	ldr	r3, [pc, #380]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a5e      	ldr	r2, [pc, #376]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
 800353e:	4b5c      	ldr	r3, [pc, #368]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0x324>
 800354c:	4b58      	ldr	r3, [pc, #352]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a57      	ldr	r2, [pc, #348]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800355e:	f023 0304 	bic.w	r3, r3, #4
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d015      	beq.n	8003598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd fd1e 	bl	8000fac <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fd fd1a 	bl	8000fac <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0cb      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	4b49      	ldr	r3, [pc, #292]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0ee      	beq.n	8003574 <HAL_RCC_OscConfig+0x334>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003598:	f7fd fd08 	bl	8000fac <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fd fd04 	bl	8000fac <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0b5      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ee      	bne.n	80035a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80a1 	beq.w	8003720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d05c      	beq.n	80036a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d141      	bne.n	8003676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <HAL_RCC_OscConfig+0x478>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd fcd8 	bl	8000fac <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd fcd4 	bl	8000fac <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e087      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	3b01      	subs	r3, #1
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	491b      	ldr	r1, [pc, #108]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x478>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fd fcad 	bl	8000fac <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003656:	f7fd fca9 	bl	8000fac <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e05c      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x416>
 8003674:	e054      	b.n	8003720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <HAL_RCC_OscConfig+0x478>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fd fc96 	bl	8000fac <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fc92 	bl	8000fac <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e045      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_OscConfig+0x470>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x444>
 80036a2:	e03d      	b.n	8003720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e038      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000
 80036b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x4ec>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d028      	beq.n	800371c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d121      	bne.n	800371c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d11a      	bne.n	800371c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d111      	bne.n	800371c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	3b01      	subs	r3, #1
 8003706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800

08003730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0cc      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b68      	ldr	r3, [pc, #416]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d90c      	bls.n	800376c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0b8      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800378e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	494d      	ldr	r1, [pc, #308]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d044      	beq.n	8003850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d119      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d003      	beq.n	80037ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ee:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06f      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fe:	4b3b      	ldr	r3, [pc, #236]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e067      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4934      	ldr	r1, [pc, #208]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	4313      	orrs	r3, r2
 800381e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003820:	f7fd fbc4 	bl	8000fac <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	e00a      	b.n	800383e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7fd fbc0 	bl	8000fac <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e04f      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 020c 	and.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	429a      	cmp	r2, r3
 800384e:	d1eb      	bne.n	8003828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d20c      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e032      	b.n	80038de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4916      	ldr	r1, [pc, #88]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490e      	ldr	r1, [pc, #56]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038b6:	f000 f821 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	490a      	ldr	r1, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fb24 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023c00 	.word	0x40023c00
 80038ec:	40023800 	.word	0x40023800
 80038f0:	080045cc 	.word	0x080045cc
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b090      	sub	sp, #64	; 0x40
 8003902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
 8003908:	2300      	movs	r3, #0
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390c:	2300      	movs	r3, #0
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d00d      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x40>
 8003920:	2b08      	cmp	r3, #8
 8003922:	f200 80a1 	bhi.w	8003a68 <HAL_RCC_GetSysClockFreq+0x16c>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x34>
 800392a:	2b04      	cmp	r3, #4
 800392c:	d003      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x3a>
 800392e:	e09b      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003932:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003934:	e09b      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003936:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800393a:	e098      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x180>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003946:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003952:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	2200      	movs	r2, #0
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	627a      	str	r2, [r7, #36]	; 0x24
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003964:	2100      	movs	r1, #0
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003968:	fb03 f201 	mul.w	r2, r3, r1
 800396c:	2300      	movs	r3, #0
 800396e:	fb00 f303 	mul.w	r3, r0, r3
 8003972:	4413      	add	r3, r2
 8003974:	4a43      	ldr	r2, [pc, #268]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003976:	fba0 1202 	umull	r1, r2, r0, r2
 800397a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800397c:	460a      	mov	r2, r1
 800397e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003982:	4413      	add	r3, r2
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	2200      	movs	r2, #0
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003996:	f7fc fc27 	bl	80001e8 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4613      	mov	r3, r2
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a2:	e053      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x180>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	2200      	movs	r2, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	617a      	str	r2, [r7, #20]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039b6:	f04f 0b00 	mov.w	fp, #0
 80039ba:	4652      	mov	r2, sl
 80039bc:	465b      	mov	r3, fp
 80039be:	f04f 0000 	mov.w	r0, #0
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	0159      	lsls	r1, r3, #5
 80039c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039cc:	0150      	lsls	r0, r2, #5
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	ebb2 080a 	subs.w	r8, r2, sl
 80039d6:	eb63 090b 	sbc.w	r9, r3, fp
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039ee:	ebb2 0408 	subs.w	r4, r2, r8
 80039f2:	eb63 0509 	sbc.w	r5, r3, r9
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	00eb      	lsls	r3, r5, #3
 8003a00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a04:	00e2      	lsls	r2, r4, #3
 8003a06:	4614      	mov	r4, r2
 8003a08:	461d      	mov	r5, r3
 8003a0a:	eb14 030a 	adds.w	r3, r4, sl
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	eb45 030b 	adc.w	r3, r5, fp
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a22:	4629      	mov	r1, r5
 8003a24:	028b      	lsls	r3, r1, #10
 8003a26:	4621      	mov	r1, r4
 8003a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	028a      	lsls	r2, r1, #10
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	2200      	movs	r2, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	60fa      	str	r2, [r7, #12]
 8003a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a40:	f7fc fbd2 	bl	80001e8 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	3301      	adds	r3, #1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a66:	e002      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3740      	adds	r7, #64	; 0x40
 8003a74:	46bd      	mov	sp, r7
 8003a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	00f42400 	.word	0x00f42400
 8003a84:	017d7840 	.word	0x017d7840

08003a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aa4:	f7ff fff0 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0a9b      	lsrs	r3, r3, #10
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	080045dc 	.word	0x080045dc

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07b      	b.n	8003bd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d009      	beq.n	8003b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f8b6 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	ea42 0103 	orr.w	r1, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0104 	and.w	r1, r3, #4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0210 	and.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b088      	sub	sp, #32
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_SPI_Transmit+0x22>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e126      	b.n	8003e4a <HAL_SPI_Transmit+0x270>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c04:	f7fd f9d2 	bl	8000fac <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c1e:	e10b      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x52>
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c30:	e102      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c78:	d10f      	bne.n	8003c9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d007      	beq.n	8003cb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc0:	d14b      	bne.n	8003d5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0xf6>
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d13e      	bne.n	8003d4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cf4:	e02b      	b.n	8003d4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d112      	bne.n	8003d2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d28:	e011      	b.n	8003d4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2a:	f7fd f93f 	bl	8000fac <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d803      	bhi.n	8003d42 <HAL_SPI_Transmit+0x168>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d102      	bne.n	8003d48 <HAL_SPI_Transmit+0x16e>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d4c:	e074      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ce      	bne.n	8003cf6 <HAL_SPI_Transmit+0x11c>
 8003d58:	e04c      	b.n	8003df4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Transmit+0x18e>
 8003d62:	8afb      	ldrh	r3, [r7, #22]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d140      	bne.n	8003dea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d8e:	e02c      	b.n	8003dea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d113      	bne.n	8003dc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dc4:	e011      	b.n	8003dea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc6:	f7fd f8f1 	bl	8000fac <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d803      	bhi.n	8003dde <HAL_SPI_Transmit+0x204>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_Transmit+0x20a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de8:	e026      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1cd      	bne.n	8003d90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f9d1 	bl	80041a0 <SPI_EndRxTxTransaction>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e000      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	099b      	lsrs	r3, r3, #6
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10f      	bne.n	8003e98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
    return;
 8003e96:	e0d7      	b.n	8004048 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_SPI_IRQHandler+0x66>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	09db      	lsrs	r3, r3, #7
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
    return;
 8003eb8:	e0c6      	b.n	8004048 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_SPI_IRQHandler+0x8c>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80b4 	beq.w	8004048 <HAL_SPI_IRQHandler+0x1f4>
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80ad 	beq.w	8004048 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d023      	beq.n	8003f42 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d011      	beq.n	8003f2a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	e00b      	b.n	8003f42 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]
        return;
 8003f40:	e082      	b.n	8004048 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d014      	beq.n	8003f78 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00c      	beq.n	8003f9e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f043 0208 	orr.w	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04f      	beq.n	8004046 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <HAL_SPI_IRQHandler+0x17e>
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d034      	beq.n	800403c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0203 	bic.w	r2, r2, #3
 8003fe0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_SPI_IRQHandler+0x1fc>)
 8003ff0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd f919 	bl	800122e <HAL_DMA_Abort_IT>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <HAL_SPI_IRQHandler+0x1fc>)
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd f903 	bl	800122e <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800403a:	e003      	b.n	8004044 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f809 	bl	8004054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004042:	e000      	b.n	8004046 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004044:	bf00      	nop
    return;
 8004046:	bf00      	nop
  }
}
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08004069 	.word	0x08004069

08004054 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff ffe6 	bl	8004054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040a0:	f7fc ff84 	bl	8000fac <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040b0:	f7fc ff7c 	bl	8000fac <HAL_GetTick>
 80040b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040b6:	4b39      	ldr	r3, [pc, #228]	; (800419c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	015b      	lsls	r3, r3, #5
 80040bc:	0d1b      	lsrs	r3, r3, #20
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c6:	e054      	b.n	8004172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d050      	beq.n	8004172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040d0:	f7fc ff6c 	bl	8000fac <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d902      	bls.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d13d      	bne.n	8004162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fe:	d111      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004108:	d004      	beq.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d107      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d10f      	bne.n	800414e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800414c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e017      	b.n	8004192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3b01      	subs	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d19b      	bne.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000000 	.word	0x20000000

080041a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <SPI_EndRxTxTransaction+0x7c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <SPI_EndRxTxTransaction+0x80>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0d5b      	lsrs	r3, r3, #21
 80041b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ca:	d112      	bne.n	80041f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff5a 	bl	8004090 <SPI_WaitFlagStateUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00f      	b.n	8004212 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d0f2      	beq.n	80041f2 <SPI_EndRxTxTransaction+0x52>
 800420c:	e000      	b.n	8004210 <SPI_EndRxTxTransaction+0x70>
        break;
 800420e:	bf00      	nop
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000
 8004220:	165e9f81 	.word	0x165e9f81

08004224 <__errno>:
 8004224:	4b01      	ldr	r3, [pc, #4]	; (800422c <__errno+0x8>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	2000000c 	.word	0x2000000c

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4d0d      	ldr	r5, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2600      	movs	r6, #0
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4d0b      	ldr	r5, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f92e 	bl	80044a4 <_init>
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2600      	movs	r6, #0
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f855 3b04 	ldr.w	r3, [r5], #4
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	080045ec 	.word	0x080045ec
 800426c:	080045ec 	.word	0x080045ec
 8004270:	080045ec 	.word	0x080045ec
 8004274:	080045f0 	.word	0x080045f0

08004278 <malloc>:
 8004278:	4b02      	ldr	r3, [pc, #8]	; (8004284 <malloc+0xc>)
 800427a:	4601      	mov	r1, r0
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	f000 b87f 	b.w	8004380 <_malloc_r>
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c

08004288 <free>:
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <free+0xc>)
 800428a:	4601      	mov	r1, r0
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	f000 b80b 	b.w	80042a8 <_free_r>
 8004292:	bf00      	nop
 8004294:	2000000c 	.word	0x2000000c

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <_free_r>:
 80042a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042aa:	2900      	cmp	r1, #0
 80042ac:	d044      	beq.n	8004338 <_free_r+0x90>
 80042ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b2:	9001      	str	r0, [sp, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f1a1 0404 	sub.w	r4, r1, #4
 80042ba:	bfb8      	it	lt
 80042bc:	18e4      	addlt	r4, r4, r3
 80042be:	f000 f8e3 	bl	8004488 <__malloc_lock>
 80042c2:	4a1e      	ldr	r2, [pc, #120]	; (800433c <_free_r+0x94>)
 80042c4:	9801      	ldr	r0, [sp, #4]
 80042c6:	6813      	ldr	r3, [r2, #0]
 80042c8:	b933      	cbnz	r3, 80042d8 <_free_r+0x30>
 80042ca:	6063      	str	r3, [r4, #4]
 80042cc:	6014      	str	r4, [r2, #0]
 80042ce:	b003      	add	sp, #12
 80042d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042d4:	f000 b8de 	b.w	8004494 <__malloc_unlock>
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d908      	bls.n	80042ee <_free_r+0x46>
 80042dc:	6825      	ldr	r5, [r4, #0]
 80042de:	1961      	adds	r1, r4, r5
 80042e0:	428b      	cmp	r3, r1
 80042e2:	bf01      	itttt	eq
 80042e4:	6819      	ldreq	r1, [r3, #0]
 80042e6:	685b      	ldreq	r3, [r3, #4]
 80042e8:	1949      	addeq	r1, r1, r5
 80042ea:	6021      	streq	r1, [r4, #0]
 80042ec:	e7ed      	b.n	80042ca <_free_r+0x22>
 80042ee:	461a      	mov	r2, r3
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b10b      	cbz	r3, 80042f8 <_free_r+0x50>
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	d9fa      	bls.n	80042ee <_free_r+0x46>
 80042f8:	6811      	ldr	r1, [r2, #0]
 80042fa:	1855      	adds	r5, r2, r1
 80042fc:	42a5      	cmp	r5, r4
 80042fe:	d10b      	bne.n	8004318 <_free_r+0x70>
 8004300:	6824      	ldr	r4, [r4, #0]
 8004302:	4421      	add	r1, r4
 8004304:	1854      	adds	r4, r2, r1
 8004306:	42a3      	cmp	r3, r4
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	d1e0      	bne.n	80042ce <_free_r+0x26>
 800430c:	681c      	ldr	r4, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	6053      	str	r3, [r2, #4]
 8004312:	4421      	add	r1, r4
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	e7da      	b.n	80042ce <_free_r+0x26>
 8004318:	d902      	bls.n	8004320 <_free_r+0x78>
 800431a:	230c      	movs	r3, #12
 800431c:	6003      	str	r3, [r0, #0]
 800431e:	e7d6      	b.n	80042ce <_free_r+0x26>
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	1961      	adds	r1, r4, r5
 8004324:	428b      	cmp	r3, r1
 8004326:	bf04      	itt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	6063      	str	r3, [r4, #4]
 800432e:	bf04      	itt	eq
 8004330:	1949      	addeq	r1, r1, r5
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	6054      	str	r4, [r2, #4]
 8004336:	e7ca      	b.n	80042ce <_free_r+0x26>
 8004338:	b003      	add	sp, #12
 800433a:	bd30      	pop	{r4, r5, pc}
 800433c:	20000140 	.word	0x20000140

08004340 <sbrk_aligned>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4e0e      	ldr	r6, [pc, #56]	; (800437c <sbrk_aligned+0x3c>)
 8004344:	460c      	mov	r4, r1
 8004346:	6831      	ldr	r1, [r6, #0]
 8004348:	4605      	mov	r5, r0
 800434a:	b911      	cbnz	r1, 8004352 <sbrk_aligned+0x12>
 800434c:	f000 f88c 	bl	8004468 <_sbrk_r>
 8004350:	6030      	str	r0, [r6, #0]
 8004352:	4621      	mov	r1, r4
 8004354:	4628      	mov	r0, r5
 8004356:	f000 f887 	bl	8004468 <_sbrk_r>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d00a      	beq.n	8004374 <sbrk_aligned+0x34>
 800435e:	1cc4      	adds	r4, r0, #3
 8004360:	f024 0403 	bic.w	r4, r4, #3
 8004364:	42a0      	cmp	r0, r4
 8004366:	d007      	beq.n	8004378 <sbrk_aligned+0x38>
 8004368:	1a21      	subs	r1, r4, r0
 800436a:	4628      	mov	r0, r5
 800436c:	f000 f87c 	bl	8004468 <_sbrk_r>
 8004370:	3001      	adds	r0, #1
 8004372:	d101      	bne.n	8004378 <sbrk_aligned+0x38>
 8004374:	f04f 34ff 	mov.w	r4, #4294967295
 8004378:	4620      	mov	r0, r4
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	20000144 	.word	0x20000144

08004380 <_malloc_r>:
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	1ccd      	adds	r5, r1, #3
 8004386:	f025 0503 	bic.w	r5, r5, #3
 800438a:	3508      	adds	r5, #8
 800438c:	2d0c      	cmp	r5, #12
 800438e:	bf38      	it	cc
 8004390:	250c      	movcc	r5, #12
 8004392:	2d00      	cmp	r5, #0
 8004394:	4607      	mov	r7, r0
 8004396:	db01      	blt.n	800439c <_malloc_r+0x1c>
 8004398:	42a9      	cmp	r1, r5
 800439a:	d905      	bls.n	80043a8 <_malloc_r+0x28>
 800439c:	230c      	movs	r3, #12
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	2600      	movs	r6, #0
 80043a2:	4630      	mov	r0, r6
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	4e2e      	ldr	r6, [pc, #184]	; (8004464 <_malloc_r+0xe4>)
 80043aa:	f000 f86d 	bl	8004488 <__malloc_lock>
 80043ae:	6833      	ldr	r3, [r6, #0]
 80043b0:	461c      	mov	r4, r3
 80043b2:	bb34      	cbnz	r4, 8004402 <_malloc_r+0x82>
 80043b4:	4629      	mov	r1, r5
 80043b6:	4638      	mov	r0, r7
 80043b8:	f7ff ffc2 	bl	8004340 <sbrk_aligned>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	4604      	mov	r4, r0
 80043c0:	d14d      	bne.n	800445e <_malloc_r+0xde>
 80043c2:	6834      	ldr	r4, [r6, #0]
 80043c4:	4626      	mov	r6, r4
 80043c6:	2e00      	cmp	r6, #0
 80043c8:	d140      	bne.n	800444c <_malloc_r+0xcc>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	4631      	mov	r1, r6
 80043ce:	4638      	mov	r0, r7
 80043d0:	eb04 0803 	add.w	r8, r4, r3
 80043d4:	f000 f848 	bl	8004468 <_sbrk_r>
 80043d8:	4580      	cmp	r8, r0
 80043da:	d13a      	bne.n	8004452 <_malloc_r+0xd2>
 80043dc:	6821      	ldr	r1, [r4, #0]
 80043de:	3503      	adds	r5, #3
 80043e0:	1a6d      	subs	r5, r5, r1
 80043e2:	f025 0503 	bic.w	r5, r5, #3
 80043e6:	3508      	adds	r5, #8
 80043e8:	2d0c      	cmp	r5, #12
 80043ea:	bf38      	it	cc
 80043ec:	250c      	movcc	r5, #12
 80043ee:	4629      	mov	r1, r5
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7ff ffa5 	bl	8004340 <sbrk_aligned>
 80043f6:	3001      	adds	r0, #1
 80043f8:	d02b      	beq.n	8004452 <_malloc_r+0xd2>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	442b      	add	r3, r5
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	e00e      	b.n	8004420 <_malloc_r+0xa0>
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	1b52      	subs	r2, r2, r5
 8004406:	d41e      	bmi.n	8004446 <_malloc_r+0xc6>
 8004408:	2a0b      	cmp	r2, #11
 800440a:	d916      	bls.n	800443a <_malloc_r+0xba>
 800440c:	1961      	adds	r1, r4, r5
 800440e:	42a3      	cmp	r3, r4
 8004410:	6025      	str	r5, [r4, #0]
 8004412:	bf18      	it	ne
 8004414:	6059      	strne	r1, [r3, #4]
 8004416:	6863      	ldr	r3, [r4, #4]
 8004418:	bf08      	it	eq
 800441a:	6031      	streq	r1, [r6, #0]
 800441c:	5162      	str	r2, [r4, r5]
 800441e:	604b      	str	r3, [r1, #4]
 8004420:	4638      	mov	r0, r7
 8004422:	f104 060b 	add.w	r6, r4, #11
 8004426:	f000 f835 	bl	8004494 <__malloc_unlock>
 800442a:	f026 0607 	bic.w	r6, r6, #7
 800442e:	1d23      	adds	r3, r4, #4
 8004430:	1af2      	subs	r2, r6, r3
 8004432:	d0b6      	beq.n	80043a2 <_malloc_r+0x22>
 8004434:	1b9b      	subs	r3, r3, r6
 8004436:	50a3      	str	r3, [r4, r2]
 8004438:	e7b3      	b.n	80043a2 <_malloc_r+0x22>
 800443a:	6862      	ldr	r2, [r4, #4]
 800443c:	42a3      	cmp	r3, r4
 800443e:	bf0c      	ite	eq
 8004440:	6032      	streq	r2, [r6, #0]
 8004442:	605a      	strne	r2, [r3, #4]
 8004444:	e7ec      	b.n	8004420 <_malloc_r+0xa0>
 8004446:	4623      	mov	r3, r4
 8004448:	6864      	ldr	r4, [r4, #4]
 800444a:	e7b2      	b.n	80043b2 <_malloc_r+0x32>
 800444c:	4634      	mov	r4, r6
 800444e:	6876      	ldr	r6, [r6, #4]
 8004450:	e7b9      	b.n	80043c6 <_malloc_r+0x46>
 8004452:	230c      	movs	r3, #12
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	4638      	mov	r0, r7
 8004458:	f000 f81c 	bl	8004494 <__malloc_unlock>
 800445c:	e7a1      	b.n	80043a2 <_malloc_r+0x22>
 800445e:	6025      	str	r5, [r4, #0]
 8004460:	e7de      	b.n	8004420 <_malloc_r+0xa0>
 8004462:	bf00      	nop
 8004464:	20000140 	.word	0x20000140

08004468 <_sbrk_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d06      	ldr	r5, [pc, #24]	; (8004484 <_sbrk_r+0x1c>)
 800446c:	2300      	movs	r3, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	f7fc fcc2 	bl	8000dfc <_sbrk>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_sbrk_r+0x1a>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_sbrk_r+0x1a>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	20000148 	.word	0x20000148

08004488 <__malloc_lock>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__malloc_lock+0x8>)
 800448a:	f000 b809 	b.w	80044a0 <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	2000014c 	.word	0x2000014c

08004494 <__malloc_unlock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_unlock+0x8>)
 8004496:	f000 b804 	b.w	80044a2 <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	2000014c 	.word	0x2000014c

080044a0 <__retarget_lock_acquire_recursive>:
 80044a0:	4770      	bx	lr

080044a2 <__retarget_lock_release_recursive>:
 80044a2:	4770      	bx	lr

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr
